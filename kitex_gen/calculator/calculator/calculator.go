// Code generated by Kitex v0.5.2. DO NOT EDIT.

package calculator

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	calculator "rpctest2/kitex_gen/calculator"
)

func serviceInfo() *kitex.ServiceInfo {
	return calculatorServiceInfo
}

var calculatorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Calculator"
	handlerType := (*calculator.Calculator)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newCalculatorAddArgs, newCalculatorAddResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "calculator",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorAddArgs)
	realResult := result.(*calculator.CalculatorAddResult)
	success, err := handler.(calculator.Calculator).Add(ctx, realArg.Num1, realArg.Num2)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorAddArgs() interface{} {
	return calculator.NewCalculatorAddArgs()
}

func newCalculatorAddResult() interface{} {
	return calculator.NewCalculatorAddResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, num1 *calculator.Request, num2 *calculator.Request) (r *calculator.Response, err error) {
	var _args calculator.CalculatorAddArgs
	_args.Num1 = num1
	_args.Num2 = num2
	var _result calculator.CalculatorAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
